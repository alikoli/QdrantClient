/* 
 * Qdrant API
 *
 * API description for Qdrant vector search engine.  This document describes CRUD and search operations on collections of points (vectors with payload).  Qdrant supports any combinations of `should`, `must` and `must_not` conditions, which makes it possible to use in applications when object could not be described solely by vector. It could be location features, availability flags, and other custom properties businesses should take into account. ## Examples This examples cover the most basic use-cases - collection creation and basic vector search. ### Create collection First - let's create a collection with dot-production metric. ``` curl -X PUT 'http://localhost:6333/collections/test_collection' \\   -H 'Content-Type: application/json' \\   - -data-raw '{     \"vectors\": {       \"size\": 4,       \"distance\": \"Dot\"     }   }'  ``` Expected response: ``` {     \"result\": true,     \"status\": \"ok\",     \"time\": 0.031095451 } ``` We can ensure that collection was created: ``` curl 'http://localhost:6333/collections/test_collection' ``` Expected response: ``` {   \"result\": {     \"status\": \"green\",     \"vectors_count\": 0,     \"segments_count\": 5,     \"disk_data_size\": 0,     \"ram_data_size\": 0,     \"config\": {       \"params\": {         \"vectors\": {           \"size\": 4,           \"distance\": \"Dot\"         }       },       \"hnsw_config\": {         \"m\": 16,         \"ef_construct\": 100,         \"full_scan_threshold\": 10000       },       \"optimizer_config\": {         \"deleted_threshold\": 0.2,         \"vacuum_min_vector_number\": 1000,         \"max_segment_number\": 5,         \"memmap_threshold\": 50000,         \"indexing_threshold\": 20000,         \"flush_interval_sec\": 1       },       \"wal_config\": {         \"wal_capacity_mb\": 32,         \"wal_segments_ahead\": 0       }     }   },   \"status\": \"ok\",   \"time\": 2.1199e-05 } ```  ### Add points Let's now add vectors with some payload: ``` curl -L -X PUT 'http://localhost:6333/collections/test_collection/points?wait=true' \\ -H 'Content-Type: application/json' \\ - -data-raw '{   \"points\": [     {\"id\": 1, \"vector\": [0.05, 0.61, 0.76, 0.74], \"payload\": {\"city\": \"Berlin\"}},     {\"id\": 2, \"vector\": [0.19, 0.81, 0.75, 0.11], \"payload\": {\"city\": [\"Berlin\", \"London\"] }},     {\"id\": 3, \"vector\": [0.36, 0.55, 0.47, 0.94], \"payload\": {\"city\": [\"Berlin\", \"Moscow\"] }},     {\"id\": 4, \"vector\": [0.18, 0.01, 0.85, 0.80], \"payload\": {\"city\": [\"London\", \"Moscow\"] }},     {\"id\": 5, \"vector\": [0.24, 0.18, 0.22, 0.44], \"payload\": {\"count\": [0]}},     {\"id\": 6, \"vector\": [0.35, 0.08, 0.11, 0.44]}   ] }' ``` Expected response: ``` {     \"result\": {         \"operation_id\": 0,         \"status\": \"completed\"     },     \"status\": \"ok\",     \"time\": 0.000206061 } ``` ### Search with filtering Let's start with a basic request: ``` curl -L -X POST 'http://localhost:6333/collections/test_collection/points/search' \\ -H 'Content-Type: application/json' \\ - -data-raw '{     \"vector\": [0.2,0.1,0.9,0.7],     \"top\": 3 }' ``` Expected response: ``` {     \"result\": [         { \"id\": 4, \"score\": 1.362, \"payload\": null, \"version\": 0 },         { \"id\": 1, \"score\": 1.273, \"payload\": null, \"version\": 0 },         { \"id\": 3, \"score\": 1.208, \"payload\": null, \"version\": 0 }     ],     \"status\": \"ok\",     \"time\": 0.000055785 } ``` But result is different if we add a filter: ``` curl -L -X POST 'http://localhost:6333/collections/test_collection/points/search' \\ -H 'Content-Type: application/json' \\ - -data-raw '{     \"filter\": {         \"should\": [             {                 \"key\": \"city\",                 \"match\": {                     \"value\": \"London\"                 }             }         ]     },     \"vector\": [0.2, 0.1, 0.9, 0.7],     \"top\": 3 }' ``` Expected response: ``` {     \"result\": [         { \"id\": 4, \"score\": 1.362, \"payload\": null, \"version\": 0 },         { \"id\": 2, \"score\": 0.871, \"payload\": null, \"version\": 0 }     ],     \"status\": \"ok\",     \"time\": 0.000093972 } ``` 
 *
 * OpenAPI spec version: v1.1.3
 * Contact: andrey@vasnetsov.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISnapshotsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create storage snapshot
        /// </summary>
        /// <remarks>
        /// Create new snapshot of the whole storage
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>InlineResponse20010</returns>
        InlineResponse20010 CreateFullSnapshot (bool? wait = null);

        /// <summary>
        /// Create storage snapshot
        /// </summary>
        /// <remarks>
        /// Create new snapshot of the whole storage
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        ApiResponse<InlineResponse20010> CreateFullSnapshotWithHttpInfo (bool? wait = null);
        /// <summary>
        /// Create collection snapshot
        /// </summary>
        /// <remarks>
        /// Create new snapshot for a collection
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection for which to create a snapshot</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>InlineResponse20010</returns>
        InlineResponse20010 CreateSnapshot (string collectionName, bool? wait = null);

        /// <summary>
        /// Create collection snapshot
        /// </summary>
        /// <remarks>
        /// Create new snapshot for a collection
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection for which to create a snapshot</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        ApiResponse<InlineResponse20010> CreateSnapshotWithHttpInfo (string collectionName, bool? wait = null);
        /// <summary>
        /// Delete storage snapshot
        /// </summary>
        /// <remarks>
        /// Delete snapshot of the whole storage
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotName">Name of the full snapshot to delete</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 DeleteFullSnapshot (string snapshotName, bool? wait = null);

        /// <summary>
        /// Delete storage snapshot
        /// </summary>
        /// <remarks>
        /// Delete snapshot of the whole storage
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotName">Name of the full snapshot to delete</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> DeleteFullSnapshotWithHttpInfo (string snapshotName, bool? wait = null);
        /// <summary>
        /// Delete collection snapshot
        /// </summary>
        /// <remarks>
        /// Delete snapshot for a collection
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection for which to delete a snapshot</param>
        /// <param name="snapshotName">Name of the snapshot to delete</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 DeleteSnapshot (string collectionName, string snapshotName, bool? wait = null);

        /// <summary>
        /// Delete collection snapshot
        /// </summary>
        /// <remarks>
        /// Delete snapshot for a collection
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection for which to delete a snapshot</param>
        /// <param name="snapshotName">Name of the snapshot to delete</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> DeleteSnapshotWithHttpInfo (string collectionName, string snapshotName, bool? wait = null);
        /// <summary>
        /// Download storage snapshot
        /// </summary>
        /// <remarks>
        /// Download specified snapshot of the whole storage as a file
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotName">Name of the snapshot to download</param>
        /// <returns>byte[]</returns>
        byte[] GetFullSnapshot (string snapshotName);

        /// <summary>
        /// Download storage snapshot
        /// </summary>
        /// <remarks>
        /// Download specified snapshot of the whole storage as a file
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotName">Name of the snapshot to download</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> GetFullSnapshotWithHttpInfo (string snapshotName);
        /// <summary>
        /// Download collection snapshot
        /// </summary>
        /// <remarks>
        /// Download specified snapshot from a collection as a file
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <param name="snapshotName">Name of the snapshot to download</param>
        /// <returns>byte[]</returns>
        byte[] GetSnapshot (string collectionName, string snapshotName);

        /// <summary>
        /// Download collection snapshot
        /// </summary>
        /// <remarks>
        /// Download specified snapshot from a collection as a file
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <param name="snapshotName">Name of the snapshot to download</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> GetSnapshotWithHttpInfo (string collectionName, string snapshotName);
        /// <summary>
        /// List of storage snapshots
        /// </summary>
        /// <remarks>
        /// Get list of snapshots of the whole storage
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 ListFullSnapshots ();

        /// <summary>
        /// List of storage snapshots
        /// </summary>
        /// <remarks>
        /// Get list of snapshots of the whole storage
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> ListFullSnapshotsWithHttpInfo ();
        /// <summary>
        /// List collection snapshots
        /// </summary>
        /// <remarks>
        /// Get list of snapshots for a collection
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 ListSnapshots (string collectionName);

        /// <summary>
        /// List collection snapshots
        /// </summary>
        /// <remarks>
        /// Get list of snapshots for a collection
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> ListSnapshotsWithHttpInfo (string collectionName);
        /// <summary>
        /// Recover from a snapshot
        /// </summary>
        /// <remarks>
        /// Recover local collection data from a snapshot. This will overwrite any data, stored on this node, for the collection. If collection does not exist - it will be created.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <param name="body">Snapshot to recover from (optional)</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 RecoverFromSnapshot (string collectionName, SnapshotRecover body = null, bool? wait = null);

        /// <summary>
        /// Recover from a snapshot
        /// </summary>
        /// <remarks>
        /// Recover local collection data from a snapshot. This will overwrite any data, stored on this node, for the collection. If collection does not exist - it will be created.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <param name="body">Snapshot to recover from (optional)</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> RecoverFromSnapshotWithHttpInfo (string collectionName, SnapshotRecover body = null, bool? wait = null);
        /// <summary>
        /// Recover from an uploaded snapshot
        /// </summary>
        /// <remarks>
        /// Recover local collection data from an uploaded snapshot. This will overwrite any data, stored on this node, for the collection. If collection does not exist - it will be created.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <param name="snapshot"> (optional)</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <param name="priority">Defines source of truth for snapshot recovery (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 RecoverFromUploadedSnapshot (string collectionName, byte[] snapshot = null, bool? wait = null, SnapshotPriority priority = default(SnapshotPriority));

        /// <summary>
        /// Recover from an uploaded snapshot
        /// </summary>
        /// <remarks>
        /// Recover local collection data from an uploaded snapshot. This will overwrite any data, stored on this node, for the collection. If collection does not exist - it will be created.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <param name="snapshot"> (optional)</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <param name="priority">Defines source of truth for snapshot recovery (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> RecoverFromUploadedSnapshotWithHttpInfo (string collectionName, byte[] snapshot = null, bool? wait = null, SnapshotPriority priority = default(SnapshotPriority));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create storage snapshot
        /// </summary>
        /// <remarks>
        /// Create new snapshot of the whole storage
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>Task of InlineResponse20010</returns>
        System.Threading.Tasks.Task<InlineResponse20010> CreateFullSnapshotAsync (bool? wait = null);

        /// <summary>
        /// Create storage snapshot
        /// </summary>
        /// <remarks>
        /// Create new snapshot of the whole storage
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> CreateFullSnapshotAsyncWithHttpInfo (bool? wait = null);
        /// <summary>
        /// Create collection snapshot
        /// </summary>
        /// <remarks>
        /// Create new snapshot for a collection
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection for which to create a snapshot</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>Task of InlineResponse20010</returns>
        System.Threading.Tasks.Task<InlineResponse20010> CreateSnapshotAsync (string collectionName, bool? wait = null);

        /// <summary>
        /// Create collection snapshot
        /// </summary>
        /// <remarks>
        /// Create new snapshot for a collection
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection for which to create a snapshot</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> CreateSnapshotAsyncWithHttpInfo (string collectionName, bool? wait = null);
        /// <summary>
        /// Delete storage snapshot
        /// </summary>
        /// <remarks>
        /// Delete snapshot of the whole storage
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotName">Name of the full snapshot to delete</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> DeleteFullSnapshotAsync (string snapshotName, bool? wait = null);

        /// <summary>
        /// Delete storage snapshot
        /// </summary>
        /// <remarks>
        /// Delete snapshot of the whole storage
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotName">Name of the full snapshot to delete</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> DeleteFullSnapshotAsyncWithHttpInfo (string snapshotName, bool? wait = null);
        /// <summary>
        /// Delete collection snapshot
        /// </summary>
        /// <remarks>
        /// Delete snapshot for a collection
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection for which to delete a snapshot</param>
        /// <param name="snapshotName">Name of the snapshot to delete</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> DeleteSnapshotAsync (string collectionName, string snapshotName, bool? wait = null);

        /// <summary>
        /// Delete collection snapshot
        /// </summary>
        /// <remarks>
        /// Delete snapshot for a collection
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection for which to delete a snapshot</param>
        /// <param name="snapshotName">Name of the snapshot to delete</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> DeleteSnapshotAsyncWithHttpInfo (string collectionName, string snapshotName, bool? wait = null);
        /// <summary>
        /// Download storage snapshot
        /// </summary>
        /// <remarks>
        /// Download specified snapshot of the whole storage as a file
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotName">Name of the snapshot to download</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> GetFullSnapshotAsync (string snapshotName);

        /// <summary>
        /// Download storage snapshot
        /// </summary>
        /// <remarks>
        /// Download specified snapshot of the whole storage as a file
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotName">Name of the snapshot to download</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> GetFullSnapshotAsyncWithHttpInfo (string snapshotName);
        /// <summary>
        /// Download collection snapshot
        /// </summary>
        /// <remarks>
        /// Download specified snapshot from a collection as a file
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <param name="snapshotName">Name of the snapshot to download</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> GetSnapshotAsync (string collectionName, string snapshotName);

        /// <summary>
        /// Download collection snapshot
        /// </summary>
        /// <remarks>
        /// Download specified snapshot from a collection as a file
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <param name="snapshotName">Name of the snapshot to download</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> GetSnapshotAsyncWithHttpInfo (string collectionName, string snapshotName);
        /// <summary>
        /// List of storage snapshots
        /// </summary>
        /// <remarks>
        /// Get list of snapshots of the whole storage
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> ListFullSnapshotsAsync ();

        /// <summary>
        /// List of storage snapshots
        /// </summary>
        /// <remarks>
        /// Get list of snapshots of the whole storage
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> ListFullSnapshotsAsyncWithHttpInfo ();
        /// <summary>
        /// List collection snapshots
        /// </summary>
        /// <remarks>
        /// Get list of snapshots for a collection
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> ListSnapshotsAsync (string collectionName);

        /// <summary>
        /// List collection snapshots
        /// </summary>
        /// <remarks>
        /// Get list of snapshots for a collection
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> ListSnapshotsAsyncWithHttpInfo (string collectionName);
        /// <summary>
        /// Recover from a snapshot
        /// </summary>
        /// <remarks>
        /// Recover local collection data from a snapshot. This will overwrite any data, stored on this node, for the collection. If collection does not exist - it will be created.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <param name="body">Snapshot to recover from (optional)</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> RecoverFromSnapshotAsync (string collectionName, SnapshotRecover body = null, bool? wait = null);

        /// <summary>
        /// Recover from a snapshot
        /// </summary>
        /// <remarks>
        /// Recover local collection data from a snapshot. This will overwrite any data, stored on this node, for the collection. If collection does not exist - it will be created.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <param name="body">Snapshot to recover from (optional)</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> RecoverFromSnapshotAsyncWithHttpInfo (string collectionName, SnapshotRecover body = null, bool? wait = null);
        /// <summary>
        /// Recover from an uploaded snapshot
        /// </summary>
        /// <remarks>
        /// Recover local collection data from an uploaded snapshot. This will overwrite any data, stored on this node, for the collection. If collection does not exist - it will be created.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <param name="snapshot"> (optional)</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <param name="priority">Defines source of truth for snapshot recovery (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> RecoverFromUploadedSnapshotAsync (string collectionName, byte[] snapshot = null, bool? wait = null, SnapshotPriority priority = default(SnapshotPriority));

        /// <summary>
        /// Recover from an uploaded snapshot
        /// </summary>
        /// <remarks>
        /// Recover local collection data from an uploaded snapshot. This will overwrite any data, stored on this node, for the collection. If collection does not exist - it will be created.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <param name="snapshot"> (optional)</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <param name="priority">Defines source of truth for snapshot recovery (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> RecoverFromUploadedSnapshotAsyncWithHttpInfo (string collectionName, byte[] snapshot = null, bool? wait = null, SnapshotPriority priority = default(SnapshotPriority));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SnapshotsApi : ISnapshotsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SnapshotsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SnapshotsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SnapshotsApi"/> class
        /// </summary>
        /// <returns></returns>
        public SnapshotsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SnapshotsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SnapshotsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create storage snapshot Create new snapshot of the whole storage
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>InlineResponse20010</returns>
        public InlineResponse20010 CreateFullSnapshot (bool? wait = null)
        {
             ApiResponse<InlineResponse20010> localVarResponse = CreateFullSnapshotWithHttpInfo(wait);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create storage snapshot Create new snapshot of the whole storage
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        public ApiResponse< InlineResponse20010 > CreateFullSnapshotWithHttpInfo (bool? wait = null)
        {

            var localVarPath = "/snapshots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wait != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wait", wait)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFullSnapshot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20010>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20010) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20010)));
        }

        /// <summary>
        /// Create storage snapshot Create new snapshot of the whole storage
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>Task of InlineResponse20010</returns>
        public async System.Threading.Tasks.Task<InlineResponse20010> CreateFullSnapshotAsync (bool? wait = null)
        {
             ApiResponse<InlineResponse20010> localVarResponse = await CreateFullSnapshotAsyncWithHttpInfo(wait);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create storage snapshot Create new snapshot of the whole storage
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> CreateFullSnapshotAsyncWithHttpInfo (bool? wait = null)
        {

            var localVarPath = "/snapshots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wait != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wait", wait)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFullSnapshot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20010>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20010) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20010)));
        }

        /// <summary>
        /// Create collection snapshot Create new snapshot for a collection
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection for which to create a snapshot</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>InlineResponse20010</returns>
        public InlineResponse20010 CreateSnapshot (string collectionName, bool? wait = null)
        {
             ApiResponse<InlineResponse20010> localVarResponse = CreateSnapshotWithHttpInfo(collectionName, wait);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create collection snapshot Create new snapshot for a collection
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection for which to create a snapshot</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        public ApiResponse< InlineResponse20010 > CreateSnapshotWithHttpInfo (string collectionName, bool? wait = null)
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new ApiException(400, "Missing required parameter 'collectionName' when calling SnapshotsApi->CreateSnapshot");

            var localVarPath = "/collections/{collection_name}/snapshots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionName != null) localVarPathParams.Add("collection_name", this.Configuration.ApiClient.ParameterToString(collectionName)); // path parameter
            if (wait != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wait", wait)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSnapshot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20010>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20010) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20010)));
        }

        /// <summary>
        /// Create collection snapshot Create new snapshot for a collection
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection for which to create a snapshot</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>Task of InlineResponse20010</returns>
        public async System.Threading.Tasks.Task<InlineResponse20010> CreateSnapshotAsync (string collectionName, bool? wait = null)
        {
             ApiResponse<InlineResponse20010> localVarResponse = await CreateSnapshotAsyncWithHttpInfo(collectionName, wait);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create collection snapshot Create new snapshot for a collection
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection for which to create a snapshot</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> CreateSnapshotAsyncWithHttpInfo (string collectionName, bool? wait = null)
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new ApiException(400, "Missing required parameter 'collectionName' when calling SnapshotsApi->CreateSnapshot");

            var localVarPath = "/collections/{collection_name}/snapshots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionName != null) localVarPathParams.Add("collection_name", this.Configuration.ApiClient.ParameterToString(collectionName)); // path parameter
            if (wait != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wait", wait)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSnapshot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20010>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20010) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20010)));
        }

        /// <summary>
        /// Delete storage snapshot Delete snapshot of the whole storage
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotName">Name of the full snapshot to delete</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 DeleteFullSnapshot (string snapshotName, bool? wait = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = DeleteFullSnapshotWithHttpInfo(snapshotName, wait);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete storage snapshot Delete snapshot of the whole storage
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotName">Name of the full snapshot to delete</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > DeleteFullSnapshotWithHttpInfo (string snapshotName, bool? wait = null)
        {
            // verify the required parameter 'snapshotName' is set
            if (snapshotName == null)
                throw new ApiException(400, "Missing required parameter 'snapshotName' when calling SnapshotsApi->DeleteFullSnapshot");

            var localVarPath = "/snapshots/{snapshot_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (snapshotName != null) localVarPathParams.Add("snapshot_name", this.Configuration.ApiClient.ParameterToString(snapshotName)); // path parameter
            if (wait != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wait", wait)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFullSnapshot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Delete storage snapshot Delete snapshot of the whole storage
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotName">Name of the full snapshot to delete</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> DeleteFullSnapshotAsync (string snapshotName, bool? wait = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await DeleteFullSnapshotAsyncWithHttpInfo(snapshotName, wait);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete storage snapshot Delete snapshot of the whole storage
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotName">Name of the full snapshot to delete</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> DeleteFullSnapshotAsyncWithHttpInfo (string snapshotName, bool? wait = null)
        {
            // verify the required parameter 'snapshotName' is set
            if (snapshotName == null)
                throw new ApiException(400, "Missing required parameter 'snapshotName' when calling SnapshotsApi->DeleteFullSnapshot");

            var localVarPath = "/snapshots/{snapshot_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (snapshotName != null) localVarPathParams.Add("snapshot_name", this.Configuration.ApiClient.ParameterToString(snapshotName)); // path parameter
            if (wait != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wait", wait)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFullSnapshot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Delete collection snapshot Delete snapshot for a collection
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection for which to delete a snapshot</param>
        /// <param name="snapshotName">Name of the snapshot to delete</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 DeleteSnapshot (string collectionName, string snapshotName, bool? wait = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = DeleteSnapshotWithHttpInfo(collectionName, snapshotName, wait);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete collection snapshot Delete snapshot for a collection
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection for which to delete a snapshot</param>
        /// <param name="snapshotName">Name of the snapshot to delete</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > DeleteSnapshotWithHttpInfo (string collectionName, string snapshotName, bool? wait = null)
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new ApiException(400, "Missing required parameter 'collectionName' when calling SnapshotsApi->DeleteSnapshot");
            // verify the required parameter 'snapshotName' is set
            if (snapshotName == null)
                throw new ApiException(400, "Missing required parameter 'snapshotName' when calling SnapshotsApi->DeleteSnapshot");

            var localVarPath = "/collections/{collection_name}/snapshots/{snapshot_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionName != null) localVarPathParams.Add("collection_name", this.Configuration.ApiClient.ParameterToString(collectionName)); // path parameter
            if (snapshotName != null) localVarPathParams.Add("snapshot_name", this.Configuration.ApiClient.ParameterToString(snapshotName)); // path parameter
            if (wait != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wait", wait)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSnapshot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Delete collection snapshot Delete snapshot for a collection
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection for which to delete a snapshot</param>
        /// <param name="snapshotName">Name of the snapshot to delete</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> DeleteSnapshotAsync (string collectionName, string snapshotName, bool? wait = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await DeleteSnapshotAsyncWithHttpInfo(collectionName, snapshotName, wait);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete collection snapshot Delete snapshot for a collection
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection for which to delete a snapshot</param>
        /// <param name="snapshotName">Name of the snapshot to delete</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> DeleteSnapshotAsyncWithHttpInfo (string collectionName, string snapshotName, bool? wait = null)
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new ApiException(400, "Missing required parameter 'collectionName' when calling SnapshotsApi->DeleteSnapshot");
            // verify the required parameter 'snapshotName' is set
            if (snapshotName == null)
                throw new ApiException(400, "Missing required parameter 'snapshotName' when calling SnapshotsApi->DeleteSnapshot");

            var localVarPath = "/collections/{collection_name}/snapshots/{snapshot_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionName != null) localVarPathParams.Add("collection_name", this.Configuration.ApiClient.ParameterToString(collectionName)); // path parameter
            if (snapshotName != null) localVarPathParams.Add("snapshot_name", this.Configuration.ApiClient.ParameterToString(snapshotName)); // path parameter
            if (wait != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wait", wait)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSnapshot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Download storage snapshot Download specified snapshot of the whole storage as a file
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotName">Name of the snapshot to download</param>
        /// <returns>byte[]</returns>
        public byte[] GetFullSnapshot (string snapshotName)
        {
             ApiResponse<byte[]> localVarResponse = GetFullSnapshotWithHttpInfo(snapshotName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download storage snapshot Download specified snapshot of the whole storage as a file
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotName">Name of the snapshot to download</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > GetFullSnapshotWithHttpInfo (string snapshotName)
        {
            // verify the required parameter 'snapshotName' is set
            if (snapshotName == null)
                throw new ApiException(400, "Missing required parameter 'snapshotName' when calling SnapshotsApi->GetFullSnapshot");

            var localVarPath = "/snapshots/{snapshot_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (snapshotName != null) localVarPathParams.Add("snapshot_name", this.Configuration.ApiClient.ParameterToString(snapshotName)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFullSnapshot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Download storage snapshot Download specified snapshot of the whole storage as a file
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotName">Name of the snapshot to download</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> GetFullSnapshotAsync (string snapshotName)
        {
             ApiResponse<byte[]> localVarResponse = await GetFullSnapshotAsyncWithHttpInfo(snapshotName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download storage snapshot Download specified snapshot of the whole storage as a file
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="snapshotName">Name of the snapshot to download</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> GetFullSnapshotAsyncWithHttpInfo (string snapshotName)
        {
            // verify the required parameter 'snapshotName' is set
            if (snapshotName == null)
                throw new ApiException(400, "Missing required parameter 'snapshotName' when calling SnapshotsApi->GetFullSnapshot");

            var localVarPath = "/snapshots/{snapshot_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (snapshotName != null) localVarPathParams.Add("snapshot_name", this.Configuration.ApiClient.ParameterToString(snapshotName)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFullSnapshot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Download collection snapshot Download specified snapshot from a collection as a file
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <param name="snapshotName">Name of the snapshot to download</param>
        /// <returns>byte[]</returns>
        public byte[] GetSnapshot (string collectionName, string snapshotName)
        {
             ApiResponse<byte[]> localVarResponse = GetSnapshotWithHttpInfo(collectionName, snapshotName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download collection snapshot Download specified snapshot from a collection as a file
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <param name="snapshotName">Name of the snapshot to download</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > GetSnapshotWithHttpInfo (string collectionName, string snapshotName)
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new ApiException(400, "Missing required parameter 'collectionName' when calling SnapshotsApi->GetSnapshot");
            // verify the required parameter 'snapshotName' is set
            if (snapshotName == null)
                throw new ApiException(400, "Missing required parameter 'snapshotName' when calling SnapshotsApi->GetSnapshot");

            var localVarPath = "/collections/{collection_name}/snapshots/{snapshot_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionName != null) localVarPathParams.Add("collection_name", this.Configuration.ApiClient.ParameterToString(collectionName)); // path parameter
            if (snapshotName != null) localVarPathParams.Add("snapshot_name", this.Configuration.ApiClient.ParameterToString(snapshotName)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSnapshot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Download collection snapshot Download specified snapshot from a collection as a file
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <param name="snapshotName">Name of the snapshot to download</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> GetSnapshotAsync (string collectionName, string snapshotName)
        {
             ApiResponse<byte[]> localVarResponse = await GetSnapshotAsyncWithHttpInfo(collectionName, snapshotName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download collection snapshot Download specified snapshot from a collection as a file
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <param name="snapshotName">Name of the snapshot to download</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> GetSnapshotAsyncWithHttpInfo (string collectionName, string snapshotName)
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new ApiException(400, "Missing required parameter 'collectionName' when calling SnapshotsApi->GetSnapshot");
            // verify the required parameter 'snapshotName' is set
            if (snapshotName == null)
                throw new ApiException(400, "Missing required parameter 'snapshotName' when calling SnapshotsApi->GetSnapshot");

            var localVarPath = "/collections/{collection_name}/snapshots/{snapshot_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionName != null) localVarPathParams.Add("collection_name", this.Configuration.ApiClient.ParameterToString(collectionName)); // path parameter
            if (snapshotName != null) localVarPathParams.Add("snapshot_name", this.Configuration.ApiClient.ParameterToString(snapshotName)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSnapshot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// List of storage snapshots Get list of snapshots of the whole storage
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 ListFullSnapshots ()
        {
             ApiResponse<InlineResponse2009> localVarResponse = ListFullSnapshotsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of storage snapshots Get list of snapshots of the whole storage
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public ApiResponse< InlineResponse2009 > ListFullSnapshotsWithHttpInfo ()
        {

            var localVarPath = "/snapshots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFullSnapshots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2009) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

        /// <summary>
        /// List of storage snapshots Get list of snapshots of the whole storage
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> ListFullSnapshotsAsync ()
        {
             ApiResponse<InlineResponse2009> localVarResponse = await ListFullSnapshotsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of storage snapshots Get list of snapshots of the whole storage
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> ListFullSnapshotsAsyncWithHttpInfo ()
        {

            var localVarPath = "/snapshots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFullSnapshots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2009) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

        /// <summary>
        /// List collection snapshots Get list of snapshots for a collection
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 ListSnapshots (string collectionName)
        {
             ApiResponse<InlineResponse2009> localVarResponse = ListSnapshotsWithHttpInfo(collectionName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List collection snapshots Get list of snapshots for a collection
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public ApiResponse< InlineResponse2009 > ListSnapshotsWithHttpInfo (string collectionName)
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new ApiException(400, "Missing required parameter 'collectionName' when calling SnapshotsApi->ListSnapshots");

            var localVarPath = "/collections/{collection_name}/snapshots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionName != null) localVarPathParams.Add("collection_name", this.Configuration.ApiClient.ParameterToString(collectionName)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSnapshots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2009) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

        /// <summary>
        /// List collection snapshots Get list of snapshots for a collection
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> ListSnapshotsAsync (string collectionName)
        {
             ApiResponse<InlineResponse2009> localVarResponse = await ListSnapshotsAsyncWithHttpInfo(collectionName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List collection snapshots Get list of snapshots for a collection
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> ListSnapshotsAsyncWithHttpInfo (string collectionName)
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new ApiException(400, "Missing required parameter 'collectionName' when calling SnapshotsApi->ListSnapshots");

            var localVarPath = "/collections/{collection_name}/snapshots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionName != null) localVarPathParams.Add("collection_name", this.Configuration.ApiClient.ParameterToString(collectionName)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSnapshots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2009) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

        /// <summary>
        /// Recover from a snapshot Recover local collection data from a snapshot. This will overwrite any data, stored on this node, for the collection. If collection does not exist - it will be created.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <param name="body">Snapshot to recover from (optional)</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 RecoverFromSnapshot (string collectionName, SnapshotRecover body = null, bool? wait = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = RecoverFromSnapshotWithHttpInfo(collectionName, body, wait);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recover from a snapshot Recover local collection data from a snapshot. This will overwrite any data, stored on this node, for the collection. If collection does not exist - it will be created.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <param name="body">Snapshot to recover from (optional)</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > RecoverFromSnapshotWithHttpInfo (string collectionName, SnapshotRecover body = null, bool? wait = null)
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new ApiException(400, "Missing required parameter 'collectionName' when calling SnapshotsApi->RecoverFromSnapshot");

            var localVarPath = "/collections/{collection_name}/snapshots/recover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionName != null) localVarPathParams.Add("collection_name", this.Configuration.ApiClient.ParameterToString(collectionName)); // path parameter
            if (wait != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wait", wait)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecoverFromSnapshot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Recover from a snapshot Recover local collection data from a snapshot. This will overwrite any data, stored on this node, for the collection. If collection does not exist - it will be created.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <param name="body">Snapshot to recover from (optional)</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> RecoverFromSnapshotAsync (string collectionName, SnapshotRecover body = null, bool? wait = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await RecoverFromSnapshotAsyncWithHttpInfo(collectionName, body, wait);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recover from a snapshot Recover local collection data from a snapshot. This will overwrite any data, stored on this node, for the collection. If collection does not exist - it will be created.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <param name="body">Snapshot to recover from (optional)</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> RecoverFromSnapshotAsyncWithHttpInfo (string collectionName, SnapshotRecover body = null, bool? wait = null)
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new ApiException(400, "Missing required parameter 'collectionName' when calling SnapshotsApi->RecoverFromSnapshot");

            var localVarPath = "/collections/{collection_name}/snapshots/recover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionName != null) localVarPathParams.Add("collection_name", this.Configuration.ApiClient.ParameterToString(collectionName)); // path parameter
            if (wait != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wait", wait)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecoverFromSnapshot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Recover from an uploaded snapshot Recover local collection data from an uploaded snapshot. This will overwrite any data, stored on this node, for the collection. If collection does not exist - it will be created.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <param name="snapshot"> (optional)</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <param name="priority">Defines source of truth for snapshot recovery (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 RecoverFromUploadedSnapshot (string collectionName, byte[] snapshot = null, bool? wait = null, SnapshotPriority priority = default(SnapshotPriority))
        {
             ApiResponse<InlineResponse2003> localVarResponse = RecoverFromUploadedSnapshotWithHttpInfo(collectionName, snapshot, wait, priority);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recover from an uploaded snapshot Recover local collection data from an uploaded snapshot. This will overwrite any data, stored on this node, for the collection. If collection does not exist - it will be created.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <param name="snapshot"> (optional)</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <param name="priority">Defines source of truth for snapshot recovery (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > RecoverFromUploadedSnapshotWithHttpInfo (string collectionName, byte[] snapshot = null, bool? wait = null, SnapshotPriority priority = default(SnapshotPriority))
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new ApiException(400, "Missing required parameter 'collectionName' when calling SnapshotsApi->RecoverFromUploadedSnapshot");

            var localVarPath = "/collections/{collection_name}/snapshots/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionName != null) localVarPathParams.Add("collection_name", this.Configuration.ApiClient.ParameterToString(collectionName)); // path parameter
            if (wait != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wait", wait)); // query parameter
            if (priority != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "priority", priority)); // query parameter
            if (snapshot != null) localVarFileParams.Add("snapshot", this.Configuration.ApiClient.ParameterToFile("snapshot", snapshot));

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecoverFromUploadedSnapshot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Recover from an uploaded snapshot Recover local collection data from an uploaded snapshot. This will overwrite any data, stored on this node, for the collection. If collection does not exist - it will be created.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <param name="snapshot"> (optional)</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <param name="priority">Defines source of truth for snapshot recovery (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> RecoverFromUploadedSnapshotAsync (string collectionName, byte[] snapshot = null, bool? wait = null, SnapshotPriority priority = default(SnapshotPriority))
        {
             ApiResponse<InlineResponse2003> localVarResponse = await RecoverFromUploadedSnapshotAsyncWithHttpInfo(collectionName, snapshot, wait, priority);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recover from an uploaded snapshot Recover local collection data from an uploaded snapshot. This will overwrite any data, stored on this node, for the collection. If collection does not exist - it will be created.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionName">Name of the collection</param>
        /// <param name="snapshot"> (optional)</param>
        /// <param name="wait">If true, wait for changes to actually happen. If false - let changes happen in background. Default is true. (optional)</param>
        /// <param name="priority">Defines source of truth for snapshot recovery (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> RecoverFromUploadedSnapshotAsyncWithHttpInfo (string collectionName, byte[] snapshot = null, bool? wait = null, SnapshotPriority priority = default(SnapshotPriority))
        {
            // verify the required parameter 'collectionName' is set
            if (collectionName == null)
                throw new ApiException(400, "Missing required parameter 'collectionName' when calling SnapshotsApi->RecoverFromUploadedSnapshot");

            var localVarPath = "/collections/{collection_name}/snapshots/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectionName != null) localVarPathParams.Add("collection_name", this.Configuration.ApiClient.ParameterToString(collectionName)); // path parameter
            if (wait != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "wait", wait)); // query parameter
            if (priority != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "priority", priority)); // query parameter
            if (snapshot != null) localVarFileParams.Add("snapshot", this.Configuration.ApiClient.ParameterToFile("snapshot", snapshot));

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecoverFromUploadedSnapshot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

    }
}
