/* 
 * Qdrant API
 *
 * API description for Qdrant vector search engine.  This document describes CRUD and search operations on collections of points (vectors with payload).  Qdrant supports any combinations of `should`, `must` and `must_not` conditions, which makes it possible to use in applications when object could not be described solely by vector. It could be location features, availability flags, and other custom properties businesses should take into account. ## Examples This examples cover the most basic use-cases - collection creation and basic vector search. ### Create collection First - let's create a collection with dot-production metric. ``` curl -X PUT 'http://localhost:6333/collections/test_collection' \\   -H 'Content-Type: application/json' \\   - -data-raw '{     \"vectors\": {       \"size\": 4,       \"distance\": \"Dot\"     }   }'  ``` Expected response: ``` {     \"result\": true,     \"status\": \"ok\",     \"time\": 0.031095451 } ``` We can ensure that collection was created: ``` curl 'http://localhost:6333/collections/test_collection' ``` Expected response: ``` {   \"result\": {     \"status\": \"green\",     \"vectors_count\": 0,     \"segments_count\": 5,     \"disk_data_size\": 0,     \"ram_data_size\": 0,     \"config\": {       \"params\": {         \"vectors\": {           \"size\": 4,           \"distance\": \"Dot\"         }       },       \"hnsw_config\": {         \"m\": 16,         \"ef_construct\": 100,         \"full_scan_threshold\": 10000       },       \"optimizer_config\": {         \"deleted_threshold\": 0.2,         \"vacuum_min_vector_number\": 1000,         \"max_segment_number\": 5,         \"memmap_threshold\": 50000,         \"indexing_threshold\": 20000,         \"flush_interval_sec\": 1       },       \"wal_config\": {         \"wal_capacity_mb\": 32,         \"wal_segments_ahead\": 0       }     }   },   \"status\": \"ok\",   \"time\": 2.1199e-05 } ```  ### Add points Let's now add vectors with some payload: ``` curl -L -X PUT 'http://localhost:6333/collections/test_collection/points?wait=true' \\ -H 'Content-Type: application/json' \\ - -data-raw '{   \"points\": [     {\"id\": 1, \"vector\": [0.05, 0.61, 0.76, 0.74], \"payload\": {\"city\": \"Berlin\"}},     {\"id\": 2, \"vector\": [0.19, 0.81, 0.75, 0.11], \"payload\": {\"city\": [\"Berlin\", \"London\"] }},     {\"id\": 3, \"vector\": [0.36, 0.55, 0.47, 0.94], \"payload\": {\"city\": [\"Berlin\", \"Moscow\"] }},     {\"id\": 4, \"vector\": [0.18, 0.01, 0.85, 0.80], \"payload\": {\"city\": [\"London\", \"Moscow\"] }},     {\"id\": 5, \"vector\": [0.24, 0.18, 0.22, 0.44], \"payload\": {\"count\": [0]}},     {\"id\": 6, \"vector\": [0.35, 0.08, 0.11, 0.44]}   ] }' ``` Expected response: ``` {     \"result\": {         \"operation_id\": 0,         \"status\": \"completed\"     },     \"status\": \"ok\",     \"time\": 0.000206061 } ``` ### Search with filtering Let's start with a basic request: ``` curl -L -X POST 'http://localhost:6333/collections/test_collection/points/search' \\ -H 'Content-Type: application/json' \\ - -data-raw '{     \"vector\": [0.2,0.1,0.9,0.7],     \"top\": 3 }' ``` Expected response: ``` {     \"result\": [         { \"id\": 4, \"score\": 1.362, \"payload\": null, \"version\": 0 },         { \"id\": 1, \"score\": 1.273, \"payload\": null, \"version\": 0 },         { \"id\": 3, \"score\": 1.208, \"payload\": null, \"version\": 0 }     ],     \"status\": \"ok\",     \"time\": 0.000055785 } ``` But result is different if we add a filter: ``` curl -L -X POST 'http://localhost:6333/collections/test_collection/points/search' \\ -H 'Content-Type: application/json' \\ - -data-raw '{     \"filter\": {         \"should\": [             {                 \"key\": \"city\",                 \"match\": {                     \"value\": \"London\"                 }             }         ]     },     \"vector\": [0.2, 0.1, 0.9, 0.7],     \"top\": 3 }' ``` Expected response: ``` {     \"result\": [         { \"id\": 4, \"score\": 1.362, \"payload\": null, \"version\": 0 },         { \"id\": 2, \"score\": 0.871, \"payload\": null, \"version\": 0 }     ],     \"status\": \"ok\",     \"time\": 0.000093972 } ``` 
 *
 * OpenAPI spec version: v1.1.3
 * Contact: andrey@vasnetsov.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// VectorIndexSearchesTelemetry
    /// </summary>
    [DataContract]
        public partial class VectorIndexSearchesTelemetry :  IEquatable<VectorIndexSearchesTelemetry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VectorIndexSearchesTelemetry" /> class.
        /// </summary>
        /// <param name="indexName">indexName.</param>
        /// <param name="unfilteredPlain">unfilteredPlain (required).</param>
        /// <param name="unfilteredHnsw">unfilteredHnsw (required).</param>
        /// <param name="filteredPlain">filteredPlain (required).</param>
        /// <param name="filteredSmallCardinality">filteredSmallCardinality (required).</param>
        /// <param name="filteredLargeCardinality">filteredLargeCardinality (required).</param>
        /// <param name="filteredExact">filteredExact (required).</param>
        /// <param name="unfilteredExact">unfilteredExact (required).</param>
        public VectorIndexSearchesTelemetry(string indexName = default(string), OperationDurationStatistics unfilteredPlain = default(OperationDurationStatistics), OperationDurationStatistics unfilteredHnsw = default(OperationDurationStatistics), OperationDurationStatistics filteredPlain = default(OperationDurationStatistics), OperationDurationStatistics filteredSmallCardinality = default(OperationDurationStatistics), OperationDurationStatistics filteredLargeCardinality = default(OperationDurationStatistics), OperationDurationStatistics filteredExact = default(OperationDurationStatistics), OperationDurationStatistics unfilteredExact = default(OperationDurationStatistics))
        {
            // to ensure "unfilteredPlain" is required (not null)
            if (unfilteredPlain == null)
            {
                throw new InvalidDataException("unfilteredPlain is a required property for VectorIndexSearchesTelemetry and cannot be null");
            }
            else
            {
                this.UnfilteredPlain = unfilteredPlain;
            }
            // to ensure "unfilteredHnsw" is required (not null)
            if (unfilteredHnsw == null)
            {
                throw new InvalidDataException("unfilteredHnsw is a required property for VectorIndexSearchesTelemetry and cannot be null");
            }
            else
            {
                this.UnfilteredHnsw = unfilteredHnsw;
            }
            // to ensure "filteredPlain" is required (not null)
            if (filteredPlain == null)
            {
                throw new InvalidDataException("filteredPlain is a required property for VectorIndexSearchesTelemetry and cannot be null");
            }
            else
            {
                this.FilteredPlain = filteredPlain;
            }
            // to ensure "filteredSmallCardinality" is required (not null)
            if (filteredSmallCardinality == null)
            {
                throw new InvalidDataException("filteredSmallCardinality is a required property for VectorIndexSearchesTelemetry and cannot be null");
            }
            else
            {
                this.FilteredSmallCardinality = filteredSmallCardinality;
            }
            // to ensure "filteredLargeCardinality" is required (not null)
            if (filteredLargeCardinality == null)
            {
                throw new InvalidDataException("filteredLargeCardinality is a required property for VectorIndexSearchesTelemetry and cannot be null");
            }
            else
            {
                this.FilteredLargeCardinality = filteredLargeCardinality;
            }
            // to ensure "filteredExact" is required (not null)
            if (filteredExact == null)
            {
                throw new InvalidDataException("filteredExact is a required property for VectorIndexSearchesTelemetry and cannot be null");
            }
            else
            {
                this.FilteredExact = filteredExact;
            }
            // to ensure "unfilteredExact" is required (not null)
            if (unfilteredExact == null)
            {
                throw new InvalidDataException("unfilteredExact is a required property for VectorIndexSearchesTelemetry and cannot be null");
            }
            else
            {
                this.UnfilteredExact = unfilteredExact;
            }
            this.IndexName = indexName;
        }
        
        /// <summary>
        /// Gets or Sets IndexName
        /// </summary>
        [DataMember(Name="index_name", EmitDefaultValue=false)]
        public string IndexName { get; set; }

        /// <summary>
        /// Gets or Sets UnfilteredPlain
        /// </summary>
        [DataMember(Name="unfiltered_plain", EmitDefaultValue=false)]
        public OperationDurationStatistics UnfilteredPlain { get; set; }

        /// <summary>
        /// Gets or Sets UnfilteredHnsw
        /// </summary>
        [DataMember(Name="unfiltered_hnsw", EmitDefaultValue=false)]
        public OperationDurationStatistics UnfilteredHnsw { get; set; }

        /// <summary>
        /// Gets or Sets FilteredPlain
        /// </summary>
        [DataMember(Name="filtered_plain", EmitDefaultValue=false)]
        public OperationDurationStatistics FilteredPlain { get; set; }

        /// <summary>
        /// Gets or Sets FilteredSmallCardinality
        /// </summary>
        [DataMember(Name="filtered_small_cardinality", EmitDefaultValue=false)]
        public OperationDurationStatistics FilteredSmallCardinality { get; set; }

        /// <summary>
        /// Gets or Sets FilteredLargeCardinality
        /// </summary>
        [DataMember(Name="filtered_large_cardinality", EmitDefaultValue=false)]
        public OperationDurationStatistics FilteredLargeCardinality { get; set; }

        /// <summary>
        /// Gets or Sets FilteredExact
        /// </summary>
        [DataMember(Name="filtered_exact", EmitDefaultValue=false)]
        public OperationDurationStatistics FilteredExact { get; set; }

        /// <summary>
        /// Gets or Sets UnfilteredExact
        /// </summary>
        [DataMember(Name="unfiltered_exact", EmitDefaultValue=false)]
        public OperationDurationStatistics UnfilteredExact { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VectorIndexSearchesTelemetry {\n");
            sb.Append("  IndexName: ").Append(IndexName).Append("\n");
            sb.Append("  UnfilteredPlain: ").Append(UnfilteredPlain).Append("\n");
            sb.Append("  UnfilteredHnsw: ").Append(UnfilteredHnsw).Append("\n");
            sb.Append("  FilteredPlain: ").Append(FilteredPlain).Append("\n");
            sb.Append("  FilteredSmallCardinality: ").Append(FilteredSmallCardinality).Append("\n");
            sb.Append("  FilteredLargeCardinality: ").Append(FilteredLargeCardinality).Append("\n");
            sb.Append("  FilteredExact: ").Append(FilteredExact).Append("\n");
            sb.Append("  UnfilteredExact: ").Append(UnfilteredExact).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VectorIndexSearchesTelemetry);
        }

        /// <summary>
        /// Returns true if VectorIndexSearchesTelemetry instances are equal
        /// </summary>
        /// <param name="input">Instance of VectorIndexSearchesTelemetry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VectorIndexSearchesTelemetry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IndexName == input.IndexName ||
                    (this.IndexName != null &&
                    this.IndexName.Equals(input.IndexName))
                ) && 
                (
                    this.UnfilteredPlain == input.UnfilteredPlain ||
                    (this.UnfilteredPlain != null &&
                    this.UnfilteredPlain.Equals(input.UnfilteredPlain))
                ) && 
                (
                    this.UnfilteredHnsw == input.UnfilteredHnsw ||
                    (this.UnfilteredHnsw != null &&
                    this.UnfilteredHnsw.Equals(input.UnfilteredHnsw))
                ) && 
                (
                    this.FilteredPlain == input.FilteredPlain ||
                    (this.FilteredPlain != null &&
                    this.FilteredPlain.Equals(input.FilteredPlain))
                ) && 
                (
                    this.FilteredSmallCardinality == input.FilteredSmallCardinality ||
                    (this.FilteredSmallCardinality != null &&
                    this.FilteredSmallCardinality.Equals(input.FilteredSmallCardinality))
                ) && 
                (
                    this.FilteredLargeCardinality == input.FilteredLargeCardinality ||
                    (this.FilteredLargeCardinality != null &&
                    this.FilteredLargeCardinality.Equals(input.FilteredLargeCardinality))
                ) && 
                (
                    this.FilteredExact == input.FilteredExact ||
                    (this.FilteredExact != null &&
                    this.FilteredExact.Equals(input.FilteredExact))
                ) && 
                (
                    this.UnfilteredExact == input.UnfilteredExact ||
                    (this.UnfilteredExact != null &&
                    this.UnfilteredExact.Equals(input.UnfilteredExact))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IndexName != null)
                    hashCode = hashCode * 59 + this.IndexName.GetHashCode();
                if (this.UnfilteredPlain != null)
                    hashCode = hashCode * 59 + this.UnfilteredPlain.GetHashCode();
                if (this.UnfilteredHnsw != null)
                    hashCode = hashCode * 59 + this.UnfilteredHnsw.GetHashCode();
                if (this.FilteredPlain != null)
                    hashCode = hashCode * 59 + this.FilteredPlain.GetHashCode();
                if (this.FilteredSmallCardinality != null)
                    hashCode = hashCode * 59 + this.FilteredSmallCardinality.GetHashCode();
                if (this.FilteredLargeCardinality != null)
                    hashCode = hashCode * 59 + this.FilteredLargeCardinality.GetHashCode();
                if (this.FilteredExact != null)
                    hashCode = hashCode * 59 + this.FilteredExact.GetHashCode();
                if (this.UnfilteredExact != null)
                    hashCode = hashCode * 59 + this.UnfilteredExact.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
