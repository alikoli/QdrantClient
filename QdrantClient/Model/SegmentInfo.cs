/* 
 * Qdrant API
 *
 * API description for Qdrant vector search engine.  This document describes CRUD and search operations on collections of points (vectors with payload).  Qdrant supports any combinations of `should`, `must` and `must_not` conditions, which makes it possible to use in applications when object could not be described solely by vector. It could be location features, availability flags, and other custom properties businesses should take into account. ## Examples This examples cover the most basic use-cases - collection creation and basic vector search. ### Create collection First - let's create a collection with dot-production metric. ``` curl -X PUT 'http://localhost:6333/collections/test_collection' \\   -H 'Content-Type: application/json' \\   - -data-raw '{     \"vectors\": {       \"size\": 4,       \"distance\": \"Dot\"     }   }'  ``` Expected response: ``` {     \"result\": true,     \"status\": \"ok\",     \"time\": 0.031095451 } ``` We can ensure that collection was created: ``` curl 'http://localhost:6333/collections/test_collection' ``` Expected response: ``` {   \"result\": {     \"status\": \"green\",     \"vectors_count\": 0,     \"segments_count\": 5,     \"disk_data_size\": 0,     \"ram_data_size\": 0,     \"config\": {       \"params\": {         \"vectors\": {           \"size\": 4,           \"distance\": \"Dot\"         }       },       \"hnsw_config\": {         \"m\": 16,         \"ef_construct\": 100,         \"full_scan_threshold\": 10000       },       \"optimizer_config\": {         \"deleted_threshold\": 0.2,         \"vacuum_min_vector_number\": 1000,         \"max_segment_number\": 5,         \"memmap_threshold\": 50000,         \"indexing_threshold\": 20000,         \"flush_interval_sec\": 1       },       \"wal_config\": {         \"wal_capacity_mb\": 32,         \"wal_segments_ahead\": 0       }     }   },   \"status\": \"ok\",   \"time\": 2.1199e-05 } ```  ### Add points Let's now add vectors with some payload: ``` curl -L -X PUT 'http://localhost:6333/collections/test_collection/points?wait=true' \\ -H 'Content-Type: application/json' \\ - -data-raw '{   \"points\": [     {\"id\": 1, \"vector\": [0.05, 0.61, 0.76, 0.74], \"payload\": {\"city\": \"Berlin\"}},     {\"id\": 2, \"vector\": [0.19, 0.81, 0.75, 0.11], \"payload\": {\"city\": [\"Berlin\", \"London\"] }},     {\"id\": 3, \"vector\": [0.36, 0.55, 0.47, 0.94], \"payload\": {\"city\": [\"Berlin\", \"Moscow\"] }},     {\"id\": 4, \"vector\": [0.18, 0.01, 0.85, 0.80], \"payload\": {\"city\": [\"London\", \"Moscow\"] }},     {\"id\": 5, \"vector\": [0.24, 0.18, 0.22, 0.44], \"payload\": {\"count\": [0]}},     {\"id\": 6, \"vector\": [0.35, 0.08, 0.11, 0.44]}   ] }' ``` Expected response: ``` {     \"result\": {         \"operation_id\": 0,         \"status\": \"completed\"     },     \"status\": \"ok\",     \"time\": 0.000206061 } ``` ### Search with filtering Let's start with a basic request: ``` curl -L -X POST 'http://localhost:6333/collections/test_collection/points/search' \\ -H 'Content-Type: application/json' \\ - -data-raw '{     \"vector\": [0.2,0.1,0.9,0.7],     \"top\": 3 }' ``` Expected response: ``` {     \"result\": [         { \"id\": 4, \"score\": 1.362, \"payload\": null, \"version\": 0 },         { \"id\": 1, \"score\": 1.273, \"payload\": null, \"version\": 0 },         { \"id\": 3, \"score\": 1.208, \"payload\": null, \"version\": 0 }     ],     \"status\": \"ok\",     \"time\": 0.000055785 } ``` But result is different if we add a filter: ``` curl -L -X POST 'http://localhost:6333/collections/test_collection/points/search' \\ -H 'Content-Type: application/json' \\ - -data-raw '{     \"filter\": {         \"should\": [             {                 \"key\": \"city\",                 \"match\": {                     \"value\": \"London\"                 }             }         ]     },     \"vector\": [0.2, 0.1, 0.9, 0.7],     \"top\": 3 }' ``` Expected response: ``` {     \"result\": [         { \"id\": 4, \"score\": 1.362, \"payload\": null, \"version\": 0 },         { \"id\": 2, \"score\": 0.871, \"payload\": null, \"version\": 0 }     ],     \"status\": \"ok\",     \"time\": 0.000093972 } ``` 
 *
 * OpenAPI spec version: v1.1.3
 * Contact: andrey@vasnetsov.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Aggregated information about segment
    /// </summary>
    [DataContract]
        public partial class SegmentInfo :  IEquatable<SegmentInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SegmentInfo" /> class.
        /// </summary>
        /// <param name="segmentType">segmentType (required).</param>
        /// <param name="numVectors">numVectors (required).</param>
        /// <param name="numPoints">numPoints (required).</param>
        /// <param name="numDeletedVectors">numDeletedVectors (required).</param>
        /// <param name="ramUsageBytes">ramUsageBytes (required).</param>
        /// <param name="diskUsageBytes">diskUsageBytes (required).</param>
        /// <param name="isAppendable">isAppendable (required).</param>
        /// <param name="indexSchema">indexSchema (required).</param>
        public SegmentInfo(SegmentType segmentType = default(SegmentType), int? numVectors = default(int?), int? numPoints = default(int?), int? numDeletedVectors = default(int?), int? ramUsageBytes = default(int?), int? diskUsageBytes = default(int?), bool? isAppendable = default(bool?), Dictionary<string, PayloadIndexInfo> indexSchema = default(Dictionary<string, PayloadIndexInfo>))
        {
            // to ensure "segmentType" is required (not null)
            if (segmentType == null)
            {
                throw new InvalidDataException("segmentType is a required property for SegmentInfo and cannot be null");
            }
            else
            {
                this.SegmentType = segmentType;
            }
            // to ensure "numVectors" is required (not null)
            if (numVectors == null)
            {
                throw new InvalidDataException("numVectors is a required property for SegmentInfo and cannot be null");
            }
            else
            {
                this.NumVectors = numVectors;
            }
            // to ensure "numPoints" is required (not null)
            if (numPoints == null)
            {
                throw new InvalidDataException("numPoints is a required property for SegmentInfo and cannot be null");
            }
            else
            {
                this.NumPoints = numPoints;
            }
            // to ensure "numDeletedVectors" is required (not null)
            if (numDeletedVectors == null)
            {
                throw new InvalidDataException("numDeletedVectors is a required property for SegmentInfo and cannot be null");
            }
            else
            {
                this.NumDeletedVectors = numDeletedVectors;
            }
            // to ensure "ramUsageBytes" is required (not null)
            if (ramUsageBytes == null)
            {
                throw new InvalidDataException("ramUsageBytes is a required property for SegmentInfo and cannot be null");
            }
            else
            {
                this.RamUsageBytes = ramUsageBytes;
            }
            // to ensure "diskUsageBytes" is required (not null)
            if (diskUsageBytes == null)
            {
                throw new InvalidDataException("diskUsageBytes is a required property for SegmentInfo and cannot be null");
            }
            else
            {
                this.DiskUsageBytes = diskUsageBytes;
            }
            // to ensure "isAppendable" is required (not null)
            if (isAppendable == null)
            {
                throw new InvalidDataException("isAppendable is a required property for SegmentInfo and cannot be null");
            }
            else
            {
                this.IsAppendable = isAppendable;
            }
            // to ensure "indexSchema" is required (not null)
            if (indexSchema == null)
            {
                throw new InvalidDataException("indexSchema is a required property for SegmentInfo and cannot be null");
            }
            else
            {
                this.IndexSchema = indexSchema;
            }
        }
        
        /// <summary>
        /// Gets or Sets SegmentType
        /// </summary>
        [DataMember(Name="segment_type", EmitDefaultValue=false)]
        public SegmentType SegmentType { get; set; }

        /// <summary>
        /// Gets or Sets NumVectors
        /// </summary>
        [DataMember(Name="num_vectors", EmitDefaultValue=false)]
        public int? NumVectors { get; set; }

        /// <summary>
        /// Gets or Sets NumPoints
        /// </summary>
        [DataMember(Name="num_points", EmitDefaultValue=false)]
        public int? NumPoints { get; set; }

        /// <summary>
        /// Gets or Sets NumDeletedVectors
        /// </summary>
        [DataMember(Name="num_deleted_vectors", EmitDefaultValue=false)]
        public int? NumDeletedVectors { get; set; }

        /// <summary>
        /// Gets or Sets RamUsageBytes
        /// </summary>
        [DataMember(Name="ram_usage_bytes", EmitDefaultValue=false)]
        public int? RamUsageBytes { get; set; }

        /// <summary>
        /// Gets or Sets DiskUsageBytes
        /// </summary>
        [DataMember(Name="disk_usage_bytes", EmitDefaultValue=false)]
        public int? DiskUsageBytes { get; set; }

        /// <summary>
        /// Gets or Sets IsAppendable
        /// </summary>
        [DataMember(Name="is_appendable", EmitDefaultValue=false)]
        public bool? IsAppendable { get; set; }

        /// <summary>
        /// Gets or Sets IndexSchema
        /// </summary>
        [DataMember(Name="index_schema", EmitDefaultValue=false)]
        public Dictionary<string, PayloadIndexInfo> IndexSchema { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SegmentInfo {\n");
            sb.Append("  SegmentType: ").Append(SegmentType).Append("\n");
            sb.Append("  NumVectors: ").Append(NumVectors).Append("\n");
            sb.Append("  NumPoints: ").Append(NumPoints).Append("\n");
            sb.Append("  NumDeletedVectors: ").Append(NumDeletedVectors).Append("\n");
            sb.Append("  RamUsageBytes: ").Append(RamUsageBytes).Append("\n");
            sb.Append("  DiskUsageBytes: ").Append(DiskUsageBytes).Append("\n");
            sb.Append("  IsAppendable: ").Append(IsAppendable).Append("\n");
            sb.Append("  IndexSchema: ").Append(IndexSchema).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SegmentInfo);
        }

        /// <summary>
        /// Returns true if SegmentInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SegmentInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SegmentInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SegmentType == input.SegmentType ||
                    (this.SegmentType != null &&
                    this.SegmentType.Equals(input.SegmentType))
                ) && 
                (
                    this.NumVectors == input.NumVectors ||
                    (this.NumVectors != null &&
                    this.NumVectors.Equals(input.NumVectors))
                ) && 
                (
                    this.NumPoints == input.NumPoints ||
                    (this.NumPoints != null &&
                    this.NumPoints.Equals(input.NumPoints))
                ) && 
                (
                    this.NumDeletedVectors == input.NumDeletedVectors ||
                    (this.NumDeletedVectors != null &&
                    this.NumDeletedVectors.Equals(input.NumDeletedVectors))
                ) && 
                (
                    this.RamUsageBytes == input.RamUsageBytes ||
                    (this.RamUsageBytes != null &&
                    this.RamUsageBytes.Equals(input.RamUsageBytes))
                ) && 
                (
                    this.DiskUsageBytes == input.DiskUsageBytes ||
                    (this.DiskUsageBytes != null &&
                    this.DiskUsageBytes.Equals(input.DiskUsageBytes))
                ) && 
                (
                    this.IsAppendable == input.IsAppendable ||
                    (this.IsAppendable != null &&
                    this.IsAppendable.Equals(input.IsAppendable))
                ) && 
                (
                    this.IndexSchema == input.IndexSchema ||
                    this.IndexSchema != null &&
                    input.IndexSchema != null &&
                    this.IndexSchema.SequenceEqual(input.IndexSchema)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SegmentType != null)
                    hashCode = hashCode * 59 + this.SegmentType.GetHashCode();
                if (this.NumVectors != null)
                    hashCode = hashCode * 59 + this.NumVectors.GetHashCode();
                if (this.NumPoints != null)
                    hashCode = hashCode * 59 + this.NumPoints.GetHashCode();
                if (this.NumDeletedVectors != null)
                    hashCode = hashCode * 59 + this.NumDeletedVectors.GetHashCode();
                if (this.RamUsageBytes != null)
                    hashCode = hashCode * 59 + this.RamUsageBytes.GetHashCode();
                if (this.DiskUsageBytes != null)
                    hashCode = hashCode * 59 + this.DiskUsageBytes.GetHashCode();
                if (this.IsAppendable != null)
                    hashCode = hashCode * 59 + this.IsAppendable.GetHashCode();
                if (this.IndexSchema != null)
                    hashCode = hashCode * 59 + this.IndexSchema.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
