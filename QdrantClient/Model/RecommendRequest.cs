/* 
 * Qdrant API
 *
 * API description for Qdrant vector search engine.  This document describes CRUD and search operations on collections of points (vectors with payload).  Qdrant supports any combinations of `should`, `must` and `must_not` conditions, which makes it possible to use in applications when object could not be described solely by vector. It could be location features, availability flags, and other custom properties businesses should take into account. ## Examples This examples cover the most basic use-cases - collection creation and basic vector search. ### Create collection First - let's create a collection with dot-production metric. ``` curl -X PUT 'http://localhost:6333/collections/test_collection' \\   -H 'Content-Type: application/json' \\   - -data-raw '{     \"vectors\": {       \"size\": 4,       \"distance\": \"Dot\"     }   }'  ``` Expected response: ``` {     \"result\": true,     \"status\": \"ok\",     \"time\": 0.031095451 } ``` We can ensure that collection was created: ``` curl 'http://localhost:6333/collections/test_collection' ``` Expected response: ``` {   \"result\": {     \"status\": \"green\",     \"vectors_count\": 0,     \"segments_count\": 5,     \"disk_data_size\": 0,     \"ram_data_size\": 0,     \"config\": {       \"params\": {         \"vectors\": {           \"size\": 4,           \"distance\": \"Dot\"         }       },       \"hnsw_config\": {         \"m\": 16,         \"ef_construct\": 100,         \"full_scan_threshold\": 10000       },       \"optimizer_config\": {         \"deleted_threshold\": 0.2,         \"vacuum_min_vector_number\": 1000,         \"max_segment_number\": 5,         \"memmap_threshold\": 50000,         \"indexing_threshold\": 20000,         \"flush_interval_sec\": 1       },       \"wal_config\": {         \"wal_capacity_mb\": 32,         \"wal_segments_ahead\": 0       }     }   },   \"status\": \"ok\",   \"time\": 2.1199e-05 } ```  ### Add points Let's now add vectors with some payload: ``` curl -L -X PUT 'http://localhost:6333/collections/test_collection/points?wait=true' \\ -H 'Content-Type: application/json' \\ - -data-raw '{   \"points\": [     {\"id\": 1, \"vector\": [0.05, 0.61, 0.76, 0.74], \"payload\": {\"city\": \"Berlin\"}},     {\"id\": 2, \"vector\": [0.19, 0.81, 0.75, 0.11], \"payload\": {\"city\": [\"Berlin\", \"London\"] }},     {\"id\": 3, \"vector\": [0.36, 0.55, 0.47, 0.94], \"payload\": {\"city\": [\"Berlin\", \"Moscow\"] }},     {\"id\": 4, \"vector\": [0.18, 0.01, 0.85, 0.80], \"payload\": {\"city\": [\"London\", \"Moscow\"] }},     {\"id\": 5, \"vector\": [0.24, 0.18, 0.22, 0.44], \"payload\": {\"count\": [0]}},     {\"id\": 6, \"vector\": [0.35, 0.08, 0.11, 0.44]}   ] }' ``` Expected response: ``` {     \"result\": {         \"operation_id\": 0,         \"status\": \"completed\"     },     \"status\": \"ok\",     \"time\": 0.000206061 } ``` ### Search with filtering Let's start with a basic request: ``` curl -L -X POST 'http://localhost:6333/collections/test_collection/points/search' \\ -H 'Content-Type: application/json' \\ - -data-raw '{     \"vector\": [0.2,0.1,0.9,0.7],     \"top\": 3 }' ``` Expected response: ``` {     \"result\": [         { \"id\": 4, \"score\": 1.362, \"payload\": null, \"version\": 0 },         { \"id\": 1, \"score\": 1.273, \"payload\": null, \"version\": 0 },         { \"id\": 3, \"score\": 1.208, \"payload\": null, \"version\": 0 }     ],     \"status\": \"ok\",     \"time\": 0.000055785 } ``` But result is different if we add a filter: ``` curl -L -X POST 'http://localhost:6333/collections/test_collection/points/search' \\ -H 'Content-Type: application/json' \\ - -data-raw '{     \"filter\": {         \"should\": [             {                 \"key\": \"city\",                 \"match\": {                     \"value\": \"London\"                 }             }         ]     },     \"vector\": [0.2, 0.1, 0.9, 0.7],     \"top\": 3 }' ``` Expected response: ``` {     \"result\": [         { \"id\": 4, \"score\": 1.362, \"payload\": null, \"version\": 0 },         { \"id\": 2, \"score\": 0.871, \"payload\": null, \"version\": 0 }     ],     \"status\": \"ok\",     \"time\": 0.000093972 } ``` 
 *
 * OpenAPI spec version: v1.1.3
 * Contact: andrey@vasnetsov.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Recommendation request. Provides positive and negative examples of the vectors, which are already stored in the collection.  Service should look for the points which are closer to positive examples and at the same time further to negative examples. The concrete way of how to compare negative and positive distances is up to implementation in &#x60;segment&#x60; crate.
    /// </summary>
    [DataContract]
        public partial class RecommendRequest :  IEquatable<RecommendRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecommendRequest" /> class.
        /// </summary>
        /// <param name="positive">Look for vectors closest to those (required).</param>
        /// <param name="negative">Try to avoid vectors like this (default to []).</param>
        /// <param name="filter">Look only for points which satisfies this conditions.</param>
        /// <param name="_params">Additional search params.</param>
        /// <param name="limit">Max number of result to return (required).</param>
        /// <param name="offset">Offset of the first result to return. May be used to paginate results. Note: large offset values may cause performance issues. (default to 0).</param>
        /// <param name="withPayload">Select which payload to return with the response. Default: None.</param>
        /// <param name="withVector">Whether to return the point vector with the result?.</param>
        /// <param name="scoreThreshold">Define a minimal score threshold for the result. If defined, less similar results will not be returned. Score of the returned result might be higher or smaller than the threshold depending on the Distance function used. E.g. for cosine similarity only higher scores will be returned..</param>
        /// <param name="_using">Define which vector to use for recommendation, if not specified - try to use default vector.</param>
        /// <param name="lookupFrom">The location used to lookup vectors. If not specified - use current collection. Note: the other collection should have the same vector size as the current collection.</param>
        public RecommendRequest(List<ExtendedPointId> positive = default(List<ExtendedPointId>), List<ExtendedPointId> negative = default(List<ExtendedPointId>), AnyOfRecommendRequestFilter filter = default(AnyOfRecommendRequestFilter), AnyOfRecommendRequestParams _params = default(AnyOfRecommendRequestParams), int? limit = default(int?), int? offset = 0, AnyOfRecommendRequestWithPayload withPayload = default(AnyOfRecommendRequestWithPayload), AnyOfRecommendRequestWithVector withVector = default(AnyOfRecommendRequestWithVector), float? scoreThreshold = default(float?), AnyOfRecommendRequestUsing _using = default(AnyOfRecommendRequestUsing), AnyOfRecommendRequestLookupFrom lookupFrom = default(AnyOfRecommendRequestLookupFrom))
        {
            // to ensure "positive" is required (not null)
            if (positive == null)
            {
                throw new InvalidDataException("positive is a required property for RecommendRequest and cannot be null");
            }
            else
            {
                this.Positive = positive;
            }
            // to ensure "limit" is required (not null)
            if (limit == null)
            {
                throw new InvalidDataException("limit is a required property for RecommendRequest and cannot be null");
            }
            else
            {
                this.Limit = limit;
            }
            // use default value if no "negative" provided
            if (negative == null)
            {
                this.Negative = default(List<ExtendedPointId>);
            }
            else
            {
                this.Negative = negative;
            }
            this.Filter = filter;
            this._Params = _params;
            // use default value if no "offset" provided
            if (offset == null)
            {
                this.Offset = 0;
            }
            else
            {
                this.Offset = offset;
            }
            this.WithPayload = withPayload;
            this.WithVector = withVector;
            this.ScoreThreshold = scoreThreshold;
            this._Using = _using;
            this.LookupFrom = lookupFrom;
        }
        
        /// <summary>
        /// Look for vectors closest to those
        /// </summary>
        /// <value>Look for vectors closest to those</value>
        [DataMember(Name="positive", EmitDefaultValue=false)]
        public List<ExtendedPointId> Positive { get; set; }

        /// <summary>
        /// Try to avoid vectors like this
        /// </summary>
        /// <value>Try to avoid vectors like this</value>
        [DataMember(Name="negative", EmitDefaultValue=false)]
        public List<ExtendedPointId> Negative { get; set; }

        /// <summary>
        /// Look only for points which satisfies this conditions
        /// </summary>
        /// <value>Look only for points which satisfies this conditions</value>
        [DataMember(Name="filter", EmitDefaultValue=false)]
        public AnyOfRecommendRequestFilter Filter { get; set; }

        /// <summary>
        /// Additional search params
        /// </summary>
        /// <value>Additional search params</value>
        [DataMember(Name="params", EmitDefaultValue=false)]
        public AnyOfRecommendRequestParams _Params { get; set; }

        /// <summary>
        /// Max number of result to return
        /// </summary>
        /// <value>Max number of result to return</value>
        [DataMember(Name="limit", EmitDefaultValue=false)]
        public int? Limit { get; set; }

        /// <summary>
        /// Offset of the first result to return. May be used to paginate results. Note: large offset values may cause performance issues.
        /// </summary>
        /// <value>Offset of the first result to return. May be used to paginate results. Note: large offset values may cause performance issues.</value>
        [DataMember(Name="offset", EmitDefaultValue=false)]
        public int? Offset { get; set; }

        /// <summary>
        /// Select which payload to return with the response. Default: None
        /// </summary>
        /// <value>Select which payload to return with the response. Default: None</value>
        [DataMember(Name="with_payload", EmitDefaultValue=false)]
        public AnyOfRecommendRequestWithPayload WithPayload { get; set; }

        /// <summary>
        /// Whether to return the point vector with the result?
        /// </summary>
        /// <value>Whether to return the point vector with the result?</value>
        [DataMember(Name="with_vector", EmitDefaultValue=false)]
        public AnyOfRecommendRequestWithVector WithVector { get; set; }

        /// <summary>
        /// Define a minimal score threshold for the result. If defined, less similar results will not be returned. Score of the returned result might be higher or smaller than the threshold depending on the Distance function used. E.g. for cosine similarity only higher scores will be returned.
        /// </summary>
        /// <value>Define a minimal score threshold for the result. If defined, less similar results will not be returned. Score of the returned result might be higher or smaller than the threshold depending on the Distance function used. E.g. for cosine similarity only higher scores will be returned.</value>
        [DataMember(Name="score_threshold", EmitDefaultValue=false)]
        public float? ScoreThreshold { get; set; }

        /// <summary>
        /// Define which vector to use for recommendation, if not specified - try to use default vector
        /// </summary>
        /// <value>Define which vector to use for recommendation, if not specified - try to use default vector</value>
        [DataMember(Name="using", EmitDefaultValue=false)]
        public AnyOfRecommendRequestUsing _Using { get; set; }

        /// <summary>
        /// The location used to lookup vectors. If not specified - use current collection. Note: the other collection should have the same vector size as the current collection
        /// </summary>
        /// <value>The location used to lookup vectors. If not specified - use current collection. Note: the other collection should have the same vector size as the current collection</value>
        [DataMember(Name="lookup_from", EmitDefaultValue=false)]
        public AnyOfRecommendRequestLookupFrom LookupFrom { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecommendRequest {\n");
            sb.Append("  Positive: ").Append(Positive).Append("\n");
            sb.Append("  Negative: ").Append(Negative).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  _Params: ").Append(_Params).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  WithPayload: ").Append(WithPayload).Append("\n");
            sb.Append("  WithVector: ").Append(WithVector).Append("\n");
            sb.Append("  ScoreThreshold: ").Append(ScoreThreshold).Append("\n");
            sb.Append("  _Using: ").Append(_Using).Append("\n");
            sb.Append("  LookupFrom: ").Append(LookupFrom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecommendRequest);
        }

        /// <summary>
        /// Returns true if RecommendRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RecommendRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecommendRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Positive == input.Positive ||
                    this.Positive != null &&
                    input.Positive != null &&
                    this.Positive.SequenceEqual(input.Positive)
                ) && 
                (
                    this.Negative == input.Negative ||
                    this.Negative != null &&
                    input.Negative != null &&
                    this.Negative.SequenceEqual(input.Negative)
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                ) && 
                (
                    this._Params == input._Params ||
                    (this._Params != null &&
                    this._Params.Equals(input._Params))
                ) && 
                (
                    this.Limit == input.Limit ||
                    (this.Limit != null &&
                    this.Limit.Equals(input.Limit))
                ) && 
                (
                    this.Offset == input.Offset ||
                    (this.Offset != null &&
                    this.Offset.Equals(input.Offset))
                ) && 
                (
                    this.WithPayload == input.WithPayload ||
                    (this.WithPayload != null &&
                    this.WithPayload.Equals(input.WithPayload))
                ) && 
                (
                    this.WithVector == input.WithVector ||
                    (this.WithVector != null &&
                    this.WithVector.Equals(input.WithVector))
                ) && 
                (
                    this.ScoreThreshold == input.ScoreThreshold ||
                    (this.ScoreThreshold != null &&
                    this.ScoreThreshold.Equals(input.ScoreThreshold))
                ) && 
                (
                    this._Using == input._Using ||
                    (this._Using != null &&
                    this._Using.Equals(input._Using))
                ) && 
                (
                    this.LookupFrom == input.LookupFrom ||
                    (this.LookupFrom != null &&
                    this.LookupFrom.Equals(input.LookupFrom))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Positive != null)
                    hashCode = hashCode * 59 + this.Positive.GetHashCode();
                if (this.Negative != null)
                    hashCode = hashCode * 59 + this.Negative.GetHashCode();
                if (this.Filter != null)
                    hashCode = hashCode * 59 + this.Filter.GetHashCode();
                if (this._Params != null)
                    hashCode = hashCode * 59 + this._Params.GetHashCode();
                if (this.Limit != null)
                    hashCode = hashCode * 59 + this.Limit.GetHashCode();
                if (this.Offset != null)
                    hashCode = hashCode * 59 + this.Offset.GetHashCode();
                if (this.WithPayload != null)
                    hashCode = hashCode * 59 + this.WithPayload.GetHashCode();
                if (this.WithVector != null)
                    hashCode = hashCode * 59 + this.WithVector.GetHashCode();
                if (this.ScoreThreshold != null)
                    hashCode = hashCode * 59 + this.ScoreThreshold.GetHashCode();
                if (this._Using != null)
                    hashCode = hashCode * 59 + this._Using.GetHashCode();
                if (this.LookupFrom != null)
                    hashCode = hashCode * 59 + this.LookupFrom.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
