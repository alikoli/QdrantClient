/* 
 * Qdrant API
 *
 * API description for Qdrant vector search engine.  This document describes CRUD and search operations on collections of points (vectors with payload).  Qdrant supports any combinations of `should`, `must` and `must_not` conditions, which makes it possible to use in applications when object could not be described solely by vector. It could be location features, availability flags, and other custom properties businesses should take into account. ## Examples This examples cover the most basic use-cases - collection creation and basic vector search. ### Create collection First - let's create a collection with dot-production metric. ``` curl -X PUT 'http://localhost:6333/collections/test_collection' \\   -H 'Content-Type: application/json' \\   - -data-raw '{     \"vectors\": {       \"size\": 4,       \"distance\": \"Dot\"     }   }'  ``` Expected response: ``` {     \"result\": true,     \"status\": \"ok\",     \"time\": 0.031095451 } ``` We can ensure that collection was created: ``` curl 'http://localhost:6333/collections/test_collection' ``` Expected response: ``` {   \"result\": {     \"status\": \"green\",     \"vectors_count\": 0,     \"segments_count\": 5,     \"disk_data_size\": 0,     \"ram_data_size\": 0,     \"config\": {       \"params\": {         \"vectors\": {           \"size\": 4,           \"distance\": \"Dot\"         }       },       \"hnsw_config\": {         \"m\": 16,         \"ef_construct\": 100,         \"full_scan_threshold\": 10000       },       \"optimizer_config\": {         \"deleted_threshold\": 0.2,         \"vacuum_min_vector_number\": 1000,         \"max_segment_number\": 5,         \"memmap_threshold\": 50000,         \"indexing_threshold\": 20000,         \"flush_interval_sec\": 1       },       \"wal_config\": {         \"wal_capacity_mb\": 32,         \"wal_segments_ahead\": 0       }     }   },   \"status\": \"ok\",   \"time\": 2.1199e-05 } ```  ### Add points Let's now add vectors with some payload: ``` curl -L -X PUT 'http://localhost:6333/collections/test_collection/points?wait=true' \\ -H 'Content-Type: application/json' \\ - -data-raw '{   \"points\": [     {\"id\": 1, \"vector\": [0.05, 0.61, 0.76, 0.74], \"payload\": {\"city\": \"Berlin\"}},     {\"id\": 2, \"vector\": [0.19, 0.81, 0.75, 0.11], \"payload\": {\"city\": [\"Berlin\", \"London\"] }},     {\"id\": 3, \"vector\": [0.36, 0.55, 0.47, 0.94], \"payload\": {\"city\": [\"Berlin\", \"Moscow\"] }},     {\"id\": 4, \"vector\": [0.18, 0.01, 0.85, 0.80], \"payload\": {\"city\": [\"London\", \"Moscow\"] }},     {\"id\": 5, \"vector\": [0.24, 0.18, 0.22, 0.44], \"payload\": {\"count\": [0]}},     {\"id\": 6, \"vector\": [0.35, 0.08, 0.11, 0.44]}   ] }' ``` Expected response: ``` {     \"result\": {         \"operation_id\": 0,         \"status\": \"completed\"     },     \"status\": \"ok\",     \"time\": 0.000206061 } ``` ### Search with filtering Let's start with a basic request: ``` curl -L -X POST 'http://localhost:6333/collections/test_collection/points/search' \\ -H 'Content-Type: application/json' \\ - -data-raw '{     \"vector\": [0.2,0.1,0.9,0.7],     \"top\": 3 }' ``` Expected response: ``` {     \"result\": [         { \"id\": 4, \"score\": 1.362, \"payload\": null, \"version\": 0 },         { \"id\": 1, \"score\": 1.273, \"payload\": null, \"version\": 0 },         { \"id\": 3, \"score\": 1.208, \"payload\": null, \"version\": 0 }     ],     \"status\": \"ok\",     \"time\": 0.000055785 } ``` But result is different if we add a filter: ``` curl -L -X POST 'http://localhost:6333/collections/test_collection/points/search' \\ -H 'Content-Type: application/json' \\ - -data-raw '{     \"filter\": {         \"should\": [             {                 \"key\": \"city\",                 \"match\": {                     \"value\": \"London\"                 }             }         ]     },     \"vector\": [0.2, 0.1, 0.9, 0.7],     \"top\": 3 }' ``` Expected response: ``` {     \"result\": [         { \"id\": 4, \"score\": 1.362, \"payload\": null, \"version\": 0 },         { \"id\": 2, \"score\": 0.871, \"payload\": null, \"version\": 0 }     ],     \"status\": \"ok\",     \"time\": 0.000093972 } ``` 
 *
 * OpenAPI spec version: v1.1.3
 * Contact: andrey@vasnetsov.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// CollectionTelemetry
    /// </summary>
    [DataContract]
        public partial class CollectionTelemetry :  IEquatable<CollectionTelemetry>, IValidatableObject, CollectionTelemetryEnum 
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionTelemetry" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="initTimeMs">initTimeMs (required).</param>
        /// <param name="config">config (required).</param>
        /// <param name="shards">shards (required).</param>
        /// <param name="transfers">transfers (required).</param>
        public CollectionTelemetry(string id = default(string), int? initTimeMs = default(int?), CollectionConfig config = default(CollectionConfig), List<ReplicaSetTelemetry> shards = default(List<ReplicaSetTelemetry>), List<ShardTransferInfo> transfers = default(List<ShardTransferInfo>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for CollectionTelemetry and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "initTimeMs" is required (not null)
            if (initTimeMs == null)
            {
                throw new InvalidDataException("initTimeMs is a required property for CollectionTelemetry and cannot be null");
            }
            else
            {
                this.InitTimeMs = initTimeMs;
            }
            // to ensure "config" is required (not null)
            if (config == null)
            {
                throw new InvalidDataException("config is a required property for CollectionTelemetry and cannot be null");
            }
            else
            {
                this.Config = config;
            }
            // to ensure "shards" is required (not null)
            if (shards == null)
            {
                throw new InvalidDataException("shards is a required property for CollectionTelemetry and cannot be null");
            }
            else
            {
                this.Shards = shards;
            }
            // to ensure "transfers" is required (not null)
            if (transfers == null)
            {
                throw new InvalidDataException("transfers is a required property for CollectionTelemetry and cannot be null");
            }
            else
            {
                this.Transfers = transfers;
            }
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets InitTimeMs
        /// </summary>
        [DataMember(Name="init_time_ms", EmitDefaultValue=false)]
        public int? InitTimeMs { get; set; }

        /// <summary>
        /// Gets or Sets Config
        /// </summary>
        [DataMember(Name="config", EmitDefaultValue=false)]
        public CollectionConfig Config { get; set; }

        /// <summary>
        /// Gets or Sets Shards
        /// </summary>
        [DataMember(Name="shards", EmitDefaultValue=false)]
        public List<ReplicaSetTelemetry> Shards { get; set; }

        /// <summary>
        /// Gets or Sets Transfers
        /// </summary>
        [DataMember(Name="transfers", EmitDefaultValue=false)]
        public List<ShardTransferInfo> Transfers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CollectionTelemetry {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InitTimeMs: ").Append(InitTimeMs).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  Shards: ").Append(Shards).Append("\n");
            sb.Append("  Transfers: ").Append(Transfers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CollectionTelemetry);
        }

        /// <summary>
        /// Returns true if CollectionTelemetry instances are equal
        /// </summary>
        /// <param name="input">Instance of CollectionTelemetry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CollectionTelemetry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InitTimeMs == input.InitTimeMs ||
                    (this.InitTimeMs != null &&
                    this.InitTimeMs.Equals(input.InitTimeMs))
                ) && 
                (
                    this.Config == input.Config ||
                    (this.Config != null &&
                    this.Config.Equals(input.Config))
                ) && 
                (
                    this.Shards == input.Shards ||
                    this.Shards != null &&
                    input.Shards != null &&
                    this.Shards.SequenceEqual(input.Shards)
                ) && 
                (
                    this.Transfers == input.Transfers ||
                    this.Transfers != null &&
                    input.Transfers != null &&
                    this.Transfers.SequenceEqual(input.Transfers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InitTimeMs != null)
                    hashCode = hashCode * 59 + this.InitTimeMs.GetHashCode();
                if (this.Config != null)
                    hashCode = hashCode * 59 + this.Config.GetHashCode();
                if (this.Shards != null)
                    hashCode = hashCode * 59 + this.Shards.GetHashCode();
                if (this.Transfers != null)
                    hashCode = hashCode * 59 + this.Transfers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
