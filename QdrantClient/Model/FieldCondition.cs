/* 
 * Qdrant API
 *
 * API description for Qdrant vector search engine.  This document describes CRUD and search operations on collections of points (vectors with payload).  Qdrant supports any combinations of `should`, `must` and `must_not` conditions, which makes it possible to use in applications when object could not be described solely by vector. It could be location features, availability flags, and other custom properties businesses should take into account. ## Examples This examples cover the most basic use-cases - collection creation and basic vector search. ### Create collection First - let's create a collection with dot-production metric. ``` curl -X PUT 'http://localhost:6333/collections/test_collection' \\   -H 'Content-Type: application/json' \\   - -data-raw '{     \"vectors\": {       \"size\": 4,       \"distance\": \"Dot\"     }   }'  ``` Expected response: ``` {     \"result\": true,     \"status\": \"ok\",     \"time\": 0.031095451 } ``` We can ensure that collection was created: ``` curl 'http://localhost:6333/collections/test_collection' ``` Expected response: ``` {   \"result\": {     \"status\": \"green\",     \"vectors_count\": 0,     \"segments_count\": 5,     \"disk_data_size\": 0,     \"ram_data_size\": 0,     \"config\": {       \"params\": {         \"vectors\": {           \"size\": 4,           \"distance\": \"Dot\"         }       },       \"hnsw_config\": {         \"m\": 16,         \"ef_construct\": 100,         \"full_scan_threshold\": 10000       },       \"optimizer_config\": {         \"deleted_threshold\": 0.2,         \"vacuum_min_vector_number\": 1000,         \"max_segment_number\": 5,         \"memmap_threshold\": 50000,         \"indexing_threshold\": 20000,         \"flush_interval_sec\": 1       },       \"wal_config\": {         \"wal_capacity_mb\": 32,         \"wal_segments_ahead\": 0       }     }   },   \"status\": \"ok\",   \"time\": 2.1199e-05 } ```  ### Add points Let's now add vectors with some payload: ``` curl -L -X PUT 'http://localhost:6333/collections/test_collection/points?wait=true' \\ -H 'Content-Type: application/json' \\ - -data-raw '{   \"points\": [     {\"id\": 1, \"vector\": [0.05, 0.61, 0.76, 0.74], \"payload\": {\"city\": \"Berlin\"}},     {\"id\": 2, \"vector\": [0.19, 0.81, 0.75, 0.11], \"payload\": {\"city\": [\"Berlin\", \"London\"] }},     {\"id\": 3, \"vector\": [0.36, 0.55, 0.47, 0.94], \"payload\": {\"city\": [\"Berlin\", \"Moscow\"] }},     {\"id\": 4, \"vector\": [0.18, 0.01, 0.85, 0.80], \"payload\": {\"city\": [\"London\", \"Moscow\"] }},     {\"id\": 5, \"vector\": [0.24, 0.18, 0.22, 0.44], \"payload\": {\"count\": [0]}},     {\"id\": 6, \"vector\": [0.35, 0.08, 0.11, 0.44]}   ] }' ``` Expected response: ``` {     \"result\": {         \"operation_id\": 0,         \"status\": \"completed\"     },     \"status\": \"ok\",     \"time\": 0.000206061 } ``` ### Search with filtering Let's start with a basic request: ``` curl -L -X POST 'http://localhost:6333/collections/test_collection/points/search' \\ -H 'Content-Type: application/json' \\ - -data-raw '{     \"vector\": [0.2,0.1,0.9,0.7],     \"top\": 3 }' ``` Expected response: ``` {     \"result\": [         { \"id\": 4, \"score\": 1.362, \"payload\": null, \"version\": 0 },         { \"id\": 1, \"score\": 1.273, \"payload\": null, \"version\": 0 },         { \"id\": 3, \"score\": 1.208, \"payload\": null, \"version\": 0 }     ],     \"status\": \"ok\",     \"time\": 0.000055785 } ``` But result is different if we add a filter: ``` curl -L -X POST 'http://localhost:6333/collections/test_collection/points/search' \\ -H 'Content-Type: application/json' \\ - -data-raw '{     \"filter\": {         \"should\": [             {                 \"key\": \"city\",                 \"match\": {                     \"value\": \"London\"                 }             }         ]     },     \"vector\": [0.2, 0.1, 0.9, 0.7],     \"top\": 3 }' ``` Expected response: ``` {     \"result\": [         { \"id\": 4, \"score\": 1.362, \"payload\": null, \"version\": 0 },         { \"id\": 2, \"score\": 0.871, \"payload\": null, \"version\": 0 }     ],     \"status\": \"ok\",     \"time\": 0.000093972 } ``` 
 *
 * OpenAPI spec version: v1.1.3
 * Contact: andrey@vasnetsov.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// All possible payload filtering conditions
    /// </summary>
    [DataContract]
        public partial class FieldCondition :  IEquatable<FieldCondition>, IValidatableObject, Condition 
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FieldCondition" /> class.
        /// </summary>
        /// <param name="key">Payload key (required).</param>
        /// <param name="match">Check if point has field with a given value.</param>
        /// <param name="range">Check if points value lies in a given range.</param>
        /// <param name="geoBoundingBox">Check if points geo location lies in a given area.</param>
        /// <param name="geoRadius">Check if geo point is within a given radius.</param>
        /// <param name="valuesCount">Check number of values of the field.</param>
        public FieldCondition(string key = default(string), AnyOfFieldConditionMatch match = default(AnyOfFieldConditionMatch), AnyOfFieldConditionRange range = default(AnyOfFieldConditionRange), AnyOfFieldConditionGeoBoundingBox geoBoundingBox = default(AnyOfFieldConditionGeoBoundingBox), AnyOfFieldConditionGeoRadius geoRadius = default(AnyOfFieldConditionGeoRadius), AnyOfFieldConditionValuesCount valuesCount = default(AnyOfFieldConditionValuesCount))
        {
            // to ensure "key" is required (not null)
            if (key == null)
            {
                throw new InvalidDataException("key is a required property for FieldCondition and cannot be null");
            }
            else
            {
                this.Key = key;
            }
            this.Match = match;
            this.Range = range;
            this.GeoBoundingBox = geoBoundingBox;
            this.GeoRadius = geoRadius;
            this.ValuesCount = valuesCount;
        }
        
        /// <summary>
        /// Payload key
        /// </summary>
        /// <value>Payload key</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Check if point has field with a given value
        /// </summary>
        /// <value>Check if point has field with a given value</value>
        [DataMember(Name="match", EmitDefaultValue=false)]
        public AnyOfFieldConditionMatch Match { get; set; }

        /// <summary>
        /// Check if points value lies in a given range
        /// </summary>
        /// <value>Check if points value lies in a given range</value>
        [DataMember(Name="range", EmitDefaultValue=false)]
        public AnyOfFieldConditionRange Range { get; set; }

        /// <summary>
        /// Check if points geo location lies in a given area
        /// </summary>
        /// <value>Check if points geo location lies in a given area</value>
        [DataMember(Name="geo_bounding_box", EmitDefaultValue=false)]
        public AnyOfFieldConditionGeoBoundingBox GeoBoundingBox { get; set; }

        /// <summary>
        /// Check if geo point is within a given radius
        /// </summary>
        /// <value>Check if geo point is within a given radius</value>
        [DataMember(Name="geo_radius", EmitDefaultValue=false)]
        public AnyOfFieldConditionGeoRadius GeoRadius { get; set; }

        /// <summary>
        /// Check number of values of the field
        /// </summary>
        /// <value>Check number of values of the field</value>
        [DataMember(Name="values_count", EmitDefaultValue=false)]
        public AnyOfFieldConditionValuesCount ValuesCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FieldCondition {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Match: ").Append(Match).Append("\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("  GeoBoundingBox: ").Append(GeoBoundingBox).Append("\n");
            sb.Append("  GeoRadius: ").Append(GeoRadius).Append("\n");
            sb.Append("  ValuesCount: ").Append(ValuesCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FieldCondition);
        }

        /// <summary>
        /// Returns true if FieldCondition instances are equal
        /// </summary>
        /// <param name="input">Instance of FieldCondition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldCondition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Match == input.Match ||
                    (this.Match != null &&
                    this.Match.Equals(input.Match))
                ) && 
                (
                    this.Range == input.Range ||
                    (this.Range != null &&
                    this.Range.Equals(input.Range))
                ) && 
                (
                    this.GeoBoundingBox == input.GeoBoundingBox ||
                    (this.GeoBoundingBox != null &&
                    this.GeoBoundingBox.Equals(input.GeoBoundingBox))
                ) && 
                (
                    this.GeoRadius == input.GeoRadius ||
                    (this.GeoRadius != null &&
                    this.GeoRadius.Equals(input.GeoRadius))
                ) && 
                (
                    this.ValuesCount == input.ValuesCount ||
                    (this.ValuesCount != null &&
                    this.ValuesCount.Equals(input.ValuesCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Match != null)
                    hashCode = hashCode * 59 + this.Match.GetHashCode();
                if (this.Range != null)
                    hashCode = hashCode * 59 + this.Range.GetHashCode();
                if (this.GeoBoundingBox != null)
                    hashCode = hashCode * 59 + this.GeoBoundingBox.GetHashCode();
                if (this.GeoRadius != null)
                    hashCode = hashCode * 59 + this.GeoRadius.GetHashCode();
                if (this.ValuesCount != null)
                    hashCode = hashCode * 59 + this.ValuesCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
